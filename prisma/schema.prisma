// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

 datasource db {
   provider = "postgresql"
   url = env("POSTGRES_PRISMA_URL") // uses connection pooling
   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
 }

model Banco {
  id                    String              @id @default(uuid())
  nombre                String              @unique @db.VarChar(128)
  deleted               DateTime?
  cuentas               CuentaBancaria[]
  cheques               Cheque[]
}


model CuentaBancaria {
  id                    String             @id @default(uuid())
  numeroCuenta          String             @unique @db.VarChar(128)
  banco                 Banco              @relation(fields: [bancoId], references: [id], onDelete: NoAction)
  bancoId               String
  entidad               Entidad            @relation(fields: [entidadId], references: [id], onDelete: NoAction)
  entidadId             String 
  esCuentaAhorro        Boolean
  saldo                 Decimal            @db.Money
  saldoDisponible       Decimal            @db.Money
  deleted               DateTime?
  operaciones           Operacion[]
  cheques               Cheque[]

  createdAt                  DateTime         @default(now())
  updatedAt                  DateTime         @updatedAt @default(now())
}


model Entidad {
  id                    String              @id @default(uuid())
  nombre                String              @unique @db.VarChar(128)
  ruc                   String              @unique @db.VarChar(128)
  cuentaBancarias       CuentaBancaria[]
}


model TipoOperacion {
  id                    String              @id @default(uuid())
  nombre                String              @unique
  esDebito              Boolean             
  
  afectaSaldo           Boolean
  afectaSaldoDisponible Boolean

  escondido             Boolean             @default(false)

  operaciones           Operacion[]

  deleted               DateTime?
}


model Operacion {
  id                  String                @id @default(uuid())
  tipoOperacion       TipoOperacion         @relation(fields: [tipoOperacionId], references: [id], onDelete: NoAction)
  tipoOperacionId     String                
  fechaOperacion      DateTime              @default(now())
  monto               Decimal               @db.Money
 
  cuentaBancariaOrigen CuentaBancaria       @relation(fields: [cuentaBancariaOrigenId], references: [id], onDelete: NoAction)
  cuentaBancariaOrigenId String

  bancoInvolucrado    String?               @db.VarChar(128)
  nombreInvolucrado   String                @db.VarChar(128)
  cuentaInvolucrado   String?               @db.VarChar(128)
  rucInvolucrado      String?               @db.VarChar(128)

  concepto            String               @db.VarChar(255)

  numeroComprobante   String               @db.VarChar(128) @unique

  cheque              Cheque[]

  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt @default(now())
}

enum estadoCheque {
  EMITIDO
  PAGADO
  ANULADO
  PENDIENTE
}

model Cheque {
  id                        String           @id @default(uuid())
  numeroCheque              String           @unique
  esRecibido                Boolean               
  monto                     Decimal          @db.Money        
  
  fechaEmision              DateTime
  fechaDeposito             DateTime?
  fechaPago                 DateTime? 

  involucrado               String @db.VarChar(128)

  estado                    estadoCheque     @default(EMITIDO)
  
  bancoCheque               Banco            @relation(references: [id], fields: [bancoChequeId], onDelete: NoAction)
  bancoChequeId             String

  operacion                 Operacion        @relation(references: [id], fields: [operacionId], onDelete: NoAction)
  operacionId               String
  
  cuentaAfectada            CuentaBancaria   @relation(fields: [cuentaBancariaAfectadaId], references: [id], onDelete: NoAction)
  cuentaBancariaAfectadaId  String

  createdAt                 DateTime         @default(now())
  updatedAt                 DateTime         @updatedAt @default(now())
}

enum Roles { 
  ADMIN
  EMPLOYEES
  CAJERO
}

model User {
  id            String @id @default(uuid())
  
  nombre        String @db.VarChar(128)
  apellido      String @db.VarChar(128)

  username      String @unique @db.VarChar(128)
  docIdentidad  String @unique @db.VarChar(128)

  password      String

  rol           Roles @default(EMPLOYEES)

  aperturas     AperturaCaja[]	
  comprobantes  Comprobante[]

  deleted       DateTime?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt @default(now())
}

//************************** CAJA **********************************

model Caja {
  id          String @id @default(uuid())
  numero      Int @db.Integer @unique
  
  estaCerrado Boolean @default(true)

  aperturas   AperturaCaja[]

  saldoEfectivo  Decimal @db.Money @default(0)
  saldoCheque    Decimal @db.Money @default(0)
  saldoTarjeta   Decimal @db.Money @default(0)

  deleted     DateTime?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AperturaCaja {
  id          String @id @default(uuid())
  
  caja        Caja  @relation(references: [id], fields: [cajaId], onDelete: NoAction)
  cajaId      String

  cajero      User  @relation(references: [id], fields: [cajeroId], onDelete: NoAction)
  cajeroId    String 

  movimiento Movimiento[]
  arqueo     ArqueoDeCaja?  
  registro  RegistroCaja?

  apertura     DateTime @default(now())

  saldoInicial Decimal @db.Money

  cierreCaja   DateTime?

  observaciones String?

  deleted   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cliente {
  id           String @id @default(uuid())
  
  nombre       String @db.VarChar(128)
  docIdentidad String @db.VarChar(128) @unique

  facturas     Factura[]
  recibos      Recibos[]
  
  deleted      DateTime?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model ArqueoDeCaja {
  id        String @id @default(uuid())

  apertura  AperturaCaja @relation(references: [id], fields: [aperturaId], onDelete: NoAction)
  aperturaId String @unique

  montoRegistrado Decimal @db.Money
  montoEsperado   Decimal @db.Money

  deleted   DateTime?

  observaciones String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum medioDePago {
  EFECTIVO
  CHEQUE
  TARJETA
  OTRO
}

model Movimiento{
  id                  String @id @default(uuid())
  
  apertura            AperturaCaja @relation(references: [id], fields: [aperturaId], onDelete: NoAction)
  aperturaId          String
  
  factura             Factura? @relation(references: [id], fields: [facturaId], onDelete: NoAction)
  facturaId           String?

  monto               Decimal @db.Money

  movimientoDetalles  MovimientoDetalle[]
  comprobante         Comprobante?
  recibo              Recibos?

  esIngreso           Boolean

  deleted             DateTime?

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model MovimientoDetalle {
  id              String @id @default(uuid())
  
  movimiento      Movimiento @relation(references: [id], fields: [movimientoId], onDelete: NoAction)
  movimientoId    String

  monto           Decimal @db.Money
  concepto        String?

  metodoPago      medioDePago @default(EFECTIVO)

  chequeCaja      ChequeCaja[]
  tarjeta         Tarjeta[] 

  deleted         DateTime?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Factura {
  id              String @id @default(uuid())
  
  cliente         Cliente @relation(references: [id], fields: [clienteId], onDelete: NoAction)
  clienteId       String

  numeroFactura   String @unique
  concepto        String?

  fechaEmision     DateTime
  fechaVencimiento DateTime?

  movimientos     Movimiento[]

  esContado       Boolean  

  pagado           DateTime?

  total            Decimal @db.Money
  totalSaldoPagado Decimal @db.Money

  ivaTotal         Decimal @db.Money

  recibos          Recibos[]

  deleted   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Recibos {
  id          String @id @default(uuid())

  fechaEmision DateTime @default(now())

  numeroRecibo Int @unique @default(autoincrement())
  
  cliente     Cliente @relation(references: [id], fields: [clienteId], onDelete: NoAction)
  clienteId   String
  
  factura     Factura @relation(references: [id], fields: [facturaId], onDelete: NoAction)
  facturaId   String 

  movimiento  Movimiento @relation(references: [id], fields: [movimientoId], onDelete: NoAction)
  movimientoId  String @unique

  totalPagado Decimal @db.Money

  deleted   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comprobante {
  id            String @id @default(uuid())

  fechaEmision  DateTime @default(now())

  concepto      String
  monto         Decimal @db.Money

  numeroComprobante Int @unique @default(autoincrement())

  user          User @relation(references: [id], fields: [userId], onDelete: NoAction)
  userId        String
  
  movimiento    Movimiento @relation(references: [id], fields: [movimientoId], onDelete: NoAction)
  movimientoId  String @unique

  deleted       DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChequeCaja {
  id            String @id @default(uuid())
  
  numeroCheque  String @unique

  movimientoDetalles MovimientoDetalle @relation(references: [id], fields: [movimientoId], onDelete: NoAction)
  movimientoId       String

  deleted   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tarjeta {
  id            String @id @default(uuid())
  esCredito     Boolean
  numeroTarjeta String @unique
  exp           DateTime
  cvv           String
  nombre        String @db.VarChar(128)

  movimientoDetalles MovimientoDetalle @relation(references: [id], fields: [movimientoId], onDelete: NoAction)
  movimientoId       String

  deleted   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RegistroCaja {
  id              String @id @default(uuid())

  apertura        AperturaCaja @relation(references: [id], fields: [aperturaId], onDelete: NoAction)
  aperturaId      String @unique

  montoRegistrado Decimal @db.Money
  montoEsperado   Decimal @db.Money
  montoInicial    Decimal @db.Money

  cantCheques     Int
  cantTarjetas    Int

  //I=E TOTAL (SUM DE INGRESOS Y EGRESOS INDEPENDIENTES AL METODO DE PAGO)
  montoIngresoTotal    Decimal @db.Money
  montoEgresoTotal     Decimal @db.Money

  //I=E EFECTIVO
  montoIngresoEfectivo    Decimal @db.Money

  //I=E CHEQUE
  montoIngresoCheque  Decimal @db.Money

  //I=E TARJETA
  montoIngresoTarjeta Decimal @db.Money

  deleted   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AsientoDesc {
  COBRO_FACTURAS
  EXTRACCION_CAJA

}

//ASIENTOS
model Asiento {
  id          String     @id @default(uuid())
  fecha       DateTime   @db.Date
  descripcion String
  detalles    DetalleAsiento[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted   DateTime?
}

model Cuenta {
  id          String    @id @default(uuid())
  nombre      String
  codigo      String    @unique
  detalles    DetalleAsiento[]

  asentable   Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted   DateTime?
}

model DetalleAsiento {
  id        String       @id @default(uuid())
  
  esDebe    Boolean
  monto     Decimal @db.Money
  
  asientoId String
  cuentaId  String

  asiento   Asiento  @relation(fields: [asientoId], references: [id])
  cuenta    Cuenta   @relation(fields: [cuentaId], references: [id])

  @@unique([asientoId, cuentaId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted   DateTime?
}